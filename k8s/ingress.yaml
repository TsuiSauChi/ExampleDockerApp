# 1. Create a ServiceAccount 
kind: ServiceAccount
apiVersion: v1
metadata:
  name: ingress-service-account

---

# 2. Create a RBAC; ClusterRole and ClusterRoleBinding
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ingress-cluster-role
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ingress-cluster-role-binding
roleRef: 
  kind: ClusterRole
  name: ingress-cluster-role
subjects:
  - kind: ServiceAccount
    name: ingress-service-account
    namespace: default

---

# 3. Create the ingressClass
kind: IngressClass
apiVersion: networking.k8s.io/v1
metadata:
  name: ingress-class
spec:
  controller: nginx.org/ingress-controller

--- 

# 4. Create the ingressController
kind: DaemonSet
apiVersion: apps/v1 
metadata: 
  name: ingress-daemonset
spec:
  selector:
    matchLabels:
      name: ingress-pod
  template:
    metadata:
      labels:
        name: ingress-pod
    spec:
      serviceAccountName: ingress-service-account
      containers:
        - name: ingress-controller
          imagePullPolicy: IfNotPresent
          image: nginx/nginx-ingress:2.4.0
          ports:
            - name: http 
              containerPort: 80
              hostPort: 80
            - name: https 
              containerPort: 443
              hostPort: 443
            - name: readiness-port
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /nginx-ready
              port: readiness-port
          args: 
              - -ingress-class=ingress-class
              - -enable-custom-resources=false
              # Disbale Leader election 
              - -enable-leader-election=false
              - -v=3

---

# 5. Create the ingress
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: application-ingress
spec:
  ingressClassName: ingress-class
  rules:
    - host: localhost
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: frontend-access
                port:
                  number: 80